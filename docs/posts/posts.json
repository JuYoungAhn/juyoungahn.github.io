[
  {
    "path": "posts/welcome/",
    "title": "rollup",
    "description": "rollup : multiple `group_by` operations into a single, concise statement",
    "author": [
      {
        "name": "Ju Young Ahn",
        "url": "juyoungahn.github.io"
      }
    ],
    "date": "2024-08-26",
    "categories": [
      "R",
      "package"
    ],
    "contents": "\n\nContents\nInstallation\nIn a Nutshell\nPractical example\n\nInstallation\n\n\n# From CRAN\ninstall.packages(\"rollup\")\n \n# From Github\nlibrary(devtools)\ndevtools::install_github(\"JuYoungAhn/rollup\")\n\n\nIn a Nutshell\nThe functions of rollup package allow you to simplify multiple group_by operations into a single, concise statement.\nThis makes data aggregation easier and more efficient.\n\n\nlibrary(dplyr)\nlibrary(rollup)\nmtcars %>% group_by(vs, am) %>% grouping_sets(\"vs\",\"am\",c(\"vs\",\"am\"), NA) %>% \n  summarize(n=n(), avg_mpg=mean(mpg))\n\n# A tibble: 9 × 4\n     vs    am     n avg_mpg\n  <dbl> <dbl> <int>   <dbl>\n1     0    NA    18    16.6\n2     1    NA    14    24.6\n3    NA     0    19    17.1\n4    NA     1    13    24.4\n5     0     0    12    15.0\n6     0     1     6    19.8\n7     1     0     7    20.7\n8     1     1     7    28.4\n9    NA    NA    32    20.1\n\nmtcars %>% group_by(vs, am) %>% with_rollup() %>% \n  summarize(n=n(), avg_mpg=mean(mpg))\n\n# A tibble: 7 × 4\n# Groups:   vs [3]\n     vs    am     n avg_mpg\n  <dbl> <dbl> <int>   <dbl>\n1     0     0    12    15.0\n2     0     1     6    19.8\n3     1     0     7    20.7\n4     1     1     7    28.4\n5     0    NA    18    16.6\n6     1    NA    14    24.6\n7    NA    NA    32    20.1\n\nmtcars %>% group_by(vs, am) %>% with_cube() %>% \n  summarize(n=n(), avg_mpg=mean(mpg))\n\n# A tibble: 9 × 4\n     vs    am     n avg_mpg\n  <dbl> <dbl> <int>   <dbl>\n1     0    NA    18    16.6\n2     1    NA    14    24.6\n3    NA     0    19    17.1\n4    NA     1    13    24.4\n5     0     0    12    15.0\n6     0     1     6    19.8\n7     1     0     7    20.7\n8     1     1     7    28.4\n9    NA    NA    32    20.1\n\nPractical example\nThis example shows how to compute the average pageview count grouped by various combinations of gender and age. In this section, you will see why the rollup package is useful by exploring practical data examples.\nWeb service data\n\n\nlibrary(dplyr)\nlibrary(rollup)\ndata(\"web_service_data\") # web_service_data of rollup package\n\n# Description\n# - date_id : yyyy-mm-dd\n# - id : user unique id\n# - gender : male(M), female(F)\n# - age : age band (categorical)\n# - page_view_cnt : pageview count of user on date_id\n# - product_view_cnt_cat : decile category of the product view count for a user on date_id.\nweb_service_data %>% head\n\n# A tibble: 6 × 6\n  date_id       id gender age   page_view_cnt product_view_cnt_cat\n  <chr>      <dbl> <chr>  <fct>         <dbl> <fct>               \n1 2024-06-24    19 M      40                0 60%                 \n2 2024-06-24    34 M      40                5 70%                 \n3 2024-06-24    44 F      50               12 100%                \n4 2024-06-24    57 M      60               87 20%                 \n5 2024-06-24    65 F      50                1 100%                \n6 2024-06-24    86 F      40                3 90%                 \n\ngrouping_sets\ngrouping_sets() allows you to perform multiple group_by operations simultaneously, producing combined results in a single output.\ngrouping_sets('a') is equivalent to the single grouping set operation group_by(a).\ngrouping_sets('a','b') is equivalent to row binding of group_by(a) and group_by(b).\ngrouping_sets(c('a','b'),'a','b', NA) is equivalent to row binding of group_by(a,b), group_by(a), group_by(b) and without group_by operation.\n\n\nlibrary(tidyr)\n# compute average of `page_view_cnt` group by \"gender\", \"age\", and \"gender & age\", along with the overall average. NA in the output table represents overall aggregates.\nweb_service_data %>% filter(date_id == '2024-06-30' & gender != \"N\") %>% \n  group_by(gender, age) %>% grouping_sets('gender', 'age', c('gender','age'), NA) %>% \n  summarize(avg_pv_cnt = mean(page_view_cnt))\n\n# A tibble: 21 × 3\n   gender age   avg_pv_cnt\n   <chr>  <fct>      <dbl>\n 1 F      <NA>        2.28\n 2 M      <NA>        1.92\n 3 <NA>   10          1.61\n 4 <NA>   20          3.01\n 5 <NA>   30          2.23\n 6 <NA>   40          1.77\n 7 <NA>   50          1.44\n 8 <NA>   60          2.30\n 9 F      10          2.33\n10 F      20          2.86\n# ℹ 11 more rows\n\n# compute average of `page_view_cnt` group by \"gender & age & product_view_cnt_cat\" along with the marginal average with regard to \"product_view_cnt_cat\".\nweb_service_data %>% filter(date_id == '2024-06-30' & gender != \"N\") %>% \n  group_by(gender, age, product_view_cnt_cat) %>% \n  grouping_sets('product_view_cnt_cat', c('product_view_cnt_cat', 'gender','age')) %>% \n  summarize(avg_pv_cnt = mean(page_view_cnt)) %>% \n  pivot_wider(names_from = product_view_cnt_cat, values_from = avg_pv_cnt)\n\n# A tibble: 13 × 11\n   gender age       X `20%` `40%` `50%` `60%` `70%` `80%` `90%` `100%`\n   <chr>  <fct> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl>\n 1 <NA>   <NA>  1.46  1.84   2.02 2.31   2.72  2.89  2.8   3.79   2.82\n 2 F      10    1.4   2      1.4  2.67   4    NA    NA     4     NA   \n 3 F      20    0     3.5    2.08 2.29   3.83  2.57  3.45  4.83   2.25\n 4 F      30    0.833 2.5    4.5  2.88   3     1.75  3.5   3      3.17\n 5 F      40    1.33  1.9    2.7  2.2    1.22  3     3.38  4      2   \n 6 F      50    0.462 1.5    2    2.5    1.2   4     2.5   5.33   3.5 \n 7 F      60    1.19  1.71   1    1.33   3     3     1.5   2      3   \n 8 M      10    0.375 0.833  1.14 3      1     0    NA    NA     NA   \n 9 M      20    1.14  3.17   3.16 3.55   4.5   3    NA     3.5    7   \n10 M      30    0.824 1.62   1.31 2.7    3.38  2.5   1.86  3.5   NA   \n11 M      40    0.889 0.933  2.06 0.833  1.88  3.25  1.6   1.67  NA   \n12 M      50    0.562 1.07   1.06 2.6    2     0     0.5   0     NA   \n13 M      60    3.06  2.69   4    3.5    0     8     2     1     NA   \n\nwith_cube\nwith_cube() automatically generates all possible combinations of specified variables in group_by clause.\nwith_cube() function is a simplified way of expressing grouping_sets().\nwith_cube() is equivalent to using grouping_sets() with all combinations of the specified columns.\nFor example, group_by(a,b,c) followed by with_cube() equals to grouping_sets(c('a','b','c'), c('a','b'), c('a','c'), c('b','c'), 'a', 'b', 'c', NA).\nwith_cube() is particularly useful when you want to include total aggregates of both rows and columns in a cross table.\n\n\n# This produces a table with average page view counts grouped by gender and age, including total aggregates across all combinations.\nweb_service_data %>% filter(date_id == '2024-06-30' & gender != \"N\") %>% \n  group_by(gender, age) %>% with_cube() %>% \n  summarize(avg_pv_cnt = mean(page_view_cnt)) %>% \n  pivot_wider(names_from = age, values_from = avg_pv_cnt)\n\n# A tibble: 3 × 8\n  gender  `NA`  `10`  `20`  `30`  `40`  `50`  `60`\n  <chr>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1 F       2.28  2.33  2.86  2.67  2.33 2.24   1.48\n2 M       1.92  0.92  3.19  1.91  1.31 0.907  2.99\n3 <NA>    2.08  1.61  3.01  2.23  1.77 1.44   2.30\n\nwith_rollup\nwith_rollup() creates hierarchical aggregations by progressively reducing the number of grouping variables.\nwith_rollup() is particulary useful when variables have a hierarchy, because all possible combinations are not necessary.\ngroup_by(a,b) followed by with_rollup() equals to grouping_sets(c('a','b'), 'a', NA).\ngroup_by(a,b,c) followed by with_rollup() equals to grouping_sets(c('a','b','c'), ('a','b'), ('a'), NA).\n\n\n# The variables \"age_big\" and \"age\" have a hierarchy. \nweb_service_data_processed <- web_service_data %>% mutate(\n  age_big = case_when(\n    age %in% c(10,20,30) ~ 'young',\n    age %in% c(40,50,60) ~ 'old'  \n  )\n)\n\n# If there are aggregates \"age_big & age\", marginal aggregates for \"age\" are not necessary.\n# The following code computes aggregates for \"age_big & age\", \"age_big\", and entire data set.\nweb_service_data_processed %>% group_by(age_big, age) %>% \n  with_rollup() %>% summarize(\n  user_cnt = n_distinct(id),\n  avg_pv_cnt = mean(page_view_cnt)\n)\n\n# A tibble: 9 × 4\n# Groups:   age_big [3]\n  age_big age   user_cnt avg_pv_cnt\n  <chr>   <fct>    <int>      <dbl>\n1 old     40         196       2.52\n2 old     50         178       1.99\n3 old     60         204       2.32\n4 young   10         132       1.57\n5 young   20         140       3.69\n6 young   30         150       3.77\n7 old     <NA>       578       2.29\n8 young   <NA>       422       3.06\n9 <NA>    <NA>      1000       2.61\n\n\n\n\n",
    "preview": {},
    "last_modified": "2024-08-29T20:57:08+09:00",
    "input_file": "rollup.knit.md"
  }
]
